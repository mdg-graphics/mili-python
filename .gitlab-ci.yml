workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"
      when: always
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~ /^(\[Draft\]|\(Draft\)|Draft:)/
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "master"
      when: always
    - when: never

include:
  - project: 'lc-templates/id_tokens'
    file: 'id_tokens.yml'

variables:
    MINIMUM_COVERAGE: "86"
    INSTALL_ROOT: "/collab/usr/gapps/mdg/python/"

stages:
    - test
    - deploy

before_script:
    - freturn() { return "$1" ; }
    - . .venv.sh

unit_tests:
    stage: test
    tags:
        - rzwhippet
        - shell
    script:
        - cd src
        - salloc -N1 -n56 -p pdebug python3 -m unittest

coverage:
    stage: test
    tags:
        - rzwhippet
        - shell
    script:
        - cd src
        - python3 -m coverage --version
        - salloc -N1 -n56 -p pdebug python3 -m coverage run -m unittest
        # avoid failure if there are not multiple reports
        - python3 -m coverage combine || freturn 0
        - python3 -m coverage xml
        - python3 -m coverage report --fail-under=$MINIMUM_COVERAGE
    artifacts:
        when: always
        paths:
            - src/coverage.xml
        reports:
            coverage_report:
                coverage_format: cobertura
                path: src/coverage.xml
        expire_in: 1 week
    coverage: '/TOTAL.+?([0-9]+\%)$/'

stage-release:
    stage: deploy
    tags:
        - rzwhippet
        - shell
    script:
        - pip3 install --upgrade build
        - python3 -m build

# TODO(wrt): make this actually deploy
# deploy-release:
#     stage: deploy
#     tags:
#         - rzwhippet
#         - shell
#     script:
#         - version=$(cat src/mili/__init__.py | grep 'version' | grep -Eo "[[:digit:]]+,[[:digit:]]+,[[:digit:]]+" | tr , . )
#         - git tag -a v${version} -m "version $version"
#         - git push origin v${version}
#         - pip3 install --upgrade build
#         - python3 -m build
#         - cp -n dist/* ${INSTALL_ROOT}/wheels/
#     rules:
#         - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
#           when: manual

