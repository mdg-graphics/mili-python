workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"
      when: always
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~ /^(\[Draft\]|\(Draft\)|Draft:)/
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - when: never

variables:
    SYS_PYTHON_BIN: "/usr/tce/packages/python/python-3.7.2/bin/python3"
    PIP_ARGS: "--no-cache --find-links=https://www-lc.llnl.gov/python/wheelhouse"
    VENV_NAME: "venv-mili-python-3.7.2"
    MINIMUM_COVERAGE: "86"

stages:
    - test
    - deploy

before_script:
    - python3 --version
    - ${SYS_PYTHON_BIN} -m venv ${VENV_NAME}
    - source ${VENV_NAME}/bin/activate
    - pip3 install --upgrade pip # need newer pip to build numpy on rz
    - pip3 install ${PIP_ARGS} -e .

unit_tests:
    stage: test
    tags:
        - rzgenie
        - shell
    script:
        - python3 -m unittest tests.reader_test

coverage:
    stage: test
    tags:
        - rzgenie
        - shell
    script:
        - python3 -m coverage --version
        - python3 -m coverage run -m unittest tests.reader_test
        - python3 -m coverage combine
        - python3 -m coverage xml
        - python3 -m coverage report --fail-under=$MINIMUM_COVERAGE
    artifacts:
        when: always
        paths:
            - coverage.xml
        reports:
            cobertura: coverage.xml
        expire_in: 1 week
    coverage: '/TOTAL.+?([0-9]+\%)$/'

stage-release:
    stage: deploy
    tags:
        - rzgenie
        - shell
    script:
        - pip3 install ${PIP_ARGS} .
        - pip3 wheel . -w wheels

# TODO(wrt): make this actually deploy
# deploy-release: 
#     stage: deploy
#     tags:
#         - rzgenie
#         - shell
#     script:
#         - pip3 install ${PIP_ARGS} .
#         - pip3 wheel . -w wheels
#     rules:
#         - if: '$CI_COMMIT_REF_NAME == "master"'
#         - when: manual

