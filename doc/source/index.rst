Welcome to Mili Python's documentation!
=======================================

Mili Python is a python module that allows users to interact with Mili databases.
The module contains several submodules that faciliate various operations on these databases.
The main submodules that currently exists are:

* reader
* adjacency
* append_states

The *reader* module allows users to read a mili database and get a :code:`MiliDatabase` object. The objects can be used to query the data inside such as results and mesh geometry, and also supports some derived calculations and the ability to overwrite state variables in the database.

The *adjacency* module supports a few adjacency queries on a given Mili database such as getting all the elements within a radius of another element or getting all elements associated with a given node.

The *append_states* module provides an interface for adding additional states and state data to existing Mili databases.

This manual documents the features of the mili-python modules and provides examples of how to use it.

---------------------------
Overview of Mili Databases
---------------------------

It can be useful to have a general understanding of Mili databases so a brief description and some useful information is provided here:

Mili databases consist of two main file types. There is the "A" file and 0 or more state files. The "A" file defines information about the mesh, elements, state variables, etc. that exist in the database. It is commonly referred to as the "A" file because the names of these files end with an "A" (bar10.pltA or dblpltA). The state file(s) store the results for the state variables in the Mili database. These files have the same basename as the associated "A" file but end with a numeric sequence to differentiate them (bar10.plt00, bar10.plt01, ...).

Mili databases commonly take one of two forms: Serial (combined) or Parallel (Uncombined).

* Serial databases are composed of a single "A" file and the associated state files.
* Parallel databases have many "A" files each storing a portion of the simulation. These are generated by the simulation codes running in parallel and each processor writing out its own Mili database.

.. toctree::
   :maxdepth: 2
   :caption: Contents:

   installation
   api
   examples
   mdg_defines

---------------------
License
---------------------

Mili Python Reader is distributed under the terms of both the MIT license.

All new contributions must be made under both the MIT license.

See https://github.com/mdg/mili-python/LICENSE

SPDX-License-Identifier: (Apache-2.0 OR MIT)

LLNL-CODE-838121


Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`